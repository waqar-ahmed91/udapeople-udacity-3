version: 2.1

orbs:
  slack: circleci/slack@4.4.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
      - run:
          name: Compile the code
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
      - run:
          name: Compile the code
          command: |
            cd backend
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: installing dependencies
          command: |
            cd frontend
            npm install oauth-sign
      - run:
          name: Code Testing
          command: |
            cd frontend
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: installing dependencies
          command: |
            cd backend
            npm install
      - run:
          name: code testing
          command: |
            cd backend
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.3.0
    steps:
      - checkout
      - run:
          name: Analyzing the code
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
  scan-backend:
    docker:
      - image: circleci/node:13.3.0
    steps:
      - checkout
      - run:
          name: Analyzing the code
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack/notify:
          channel: project
          event: fail
          template: basic_fail_1
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli # Docker image here that supports AWS CLI
    steps:
      - checkout # Checkout code from git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=backend \
              --stack-name "udapeople-backend-${CIRCLE_FLOW_ID}" \
              --parameter-overrides ID="{CIRCLE_FLOW_ID}"
            URLS=$(aws ec2 describe-instances --region us-east-2 --query "Reservations[*].Instances[*].PublicIpAddress"  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}"  --output text)
            echo "URLS=$URLS"
            curl -H "Content-Type: text/plain" -H "token: 0d6d031b-b5cc-4ad7-9bfd-2233791a913d" --request PUT --data "" https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=frontend \
              --stack-name "udapeople-frontend-${CIRCLE_FLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_FLOW_ID}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            export backend_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --output text >> .circleci/ansible/inventory.txt)
            cat ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11 # Docker image here that supports Ansible
    steps:
      - checkout # Checkout code from git
      - add_ssh_keys:
          fingerprints: ["b5:a3:25:69:82:a8:f0:7f:16:93:9a:ff:73:b1:63:e2"] # Add ssh keys with fingerprint
      # - attach workspace:
      #     at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Setup inventory file
          command: |
            cd .circleci/ansible
            echo "[all]" >> inventory.txt
            URL=$(curl -H "token: 0d6d031b-b5cc-4ad7-9bfd-2233791a913d" --request GET https://api.memstash.io/values/url_${CIRCLEFLOW_ID})
            echo $URLS >> inventory.txt
            cat inventory.txt
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment

#   run-migrations:
#     docker:
#       # Docker image here that supports NodeJS
#     steps:
#       # Checkout code from git
#       - run:
#           name: Run migrations
#           command: |
#             # Your code here
#             exit 1
#       - run:
#           name: Send migration results to memstash
#           command: |
#             # Your code here
#             exit 1
#       # Here's where you will add some code to rollback on failure

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

#   smoke-test:
#     docker:
#       # Lightweight Docker image
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

# cleanup:
#   docker:
#     # Docker image here
#   steps:
#     # Checkout code from git
#     - run:
#         name: Get old stack workflow id
#         command: |
#           # your code here
#           export OldWorkflowID="the id here"
#           export STACKS=[] #put the list of stacks here
#     - run:
#         name: Remove old stacks and files
#         command: |
#           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#           then
#             # your code here
#           fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
